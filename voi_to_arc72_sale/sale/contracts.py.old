from pyteal import *

def approval_program():
    # PARAMETERS
    seller_key = Bytes("seller")
    gems_fees_account_key = Bytes("gems_fees_account")
    royalties_account_key = Bytes("royalties_account")
    gems_fees_percent_key = Bytes("gems_fees_percent") # in percent
    royalties_percent_key = Bytes("royalties_percent") # in percent
    nft_id_key = Bytes("nft_id")
    nft_price = Bytes("price")
    start_time_key = Bytes("start")

    ################################################################################################################################################

    @Subroutine(TealType.none)
    def closeNFTTo(assetID: Expr, account: Expr) -> Expr:
        asset_holding = AssetHolding.balance(
            Global.current_application_address(), assetID
        )
        return Seq(
            asset_holding,
            If(asset_holding.hasValue()).Then(
                Seq(
                    InnerTxnBuilder.Begin(),
                    InnerTxnBuilder.SetFields(
                        {
                            TxnField.type_enum: TxnType.AssetTransfer,
                            TxnField.xfer_asset: assetID,
                            TxnField.asset_close_to: account,
                        }
                    ),
                    InnerTxnBuilder.Submit(),
                )
            ),
        )
        
    ################################################################################################################################################

    @Subroutine(TealType.none)
    def closeOrSendNFTTo(assetID: Expr, account: Expr, amount: Expr) -> Expr:
        asset_holding = AssetHolding.balance(
            Global.current_application_address(), assetID
        )
        return Seq(
            asset_holding,
            Assert(asset_holding.value() >= amount),
            If(asset_holding.hasValue()).Then(
                Seq(
                    If( asset_holding.value() == amount ).Then(                        
                        Seq( ##OPT OUT CLOSE THE NFT                        
                            InnerTxnBuilder.Begin(),
                            InnerTxnBuilder.SetFields(
                                {
                                    TxnField.type_enum: TxnType.AssetTransfer,
                                    TxnField.xfer_asset: assetID,
                                    TxnField.asset_close_to: account,
                                }
                            ),
                            InnerTxnBuilder.Submit(), 
                        )
                    ).Else(                        
                        Seq(
                            InnerTxnBuilder.Begin(),
                            InnerTxnBuilder.SetFields(
                                {
                                    TxnField.type_enum: TxnType.AssetTransfer,
                                    TxnField.xfer_asset: assetID,
                                    TxnField.asset_receiver: account,
                                    TxnField.asset_amount: amount,                                  
                                    TxnField.fee: Global.min_txn_fee()
                                }
                            ),
                            InnerTxnBuilder.Submit(),
                        )
                    )
                )
            ).Else(     
                Reject()
            ),
        )

    ################################################################################################################################################

    @Subroutine(TealType.none)
    def SendGemsFees(amount: Expr) -> Expr:    
        return  Seq(       
            InnerTxnBuilder.Begin(),
            InnerTxnBuilder.SetFields(
                {
                    TxnField.type_enum: TxnType.Payment,
                    TxnField.amount: Mul(Div( Mul(App.globalGet(nft_price), App.globalGet(gems_fees_percent_key)),  Int(100)), amount),
                    TxnField.receiver: App.globalGet(gems_fees_account_key),
                }
            ),
            InnerTxnBuilder.Submit(),
        )
        

    ################################################################################################################################################
    
        
    @Subroutine(TealType.none)
    def SendRoyaltiesFees(amount: Expr) -> Expr:    
        return  Seq(       
            InnerTxnBuilder.Begin(),
            InnerTxnBuilder.SetFields(
                {
                    TxnField.type_enum: TxnType.Payment,
                    TxnField.amount: Mul(Div( Mul(App.globalGet(nft_price), App.globalGet(royalties_percent_key)), Int(100)), amount),
                    TxnField.receiver: App.globalGet(royalties_account_key),
                }
            ),
            InnerTxnBuilder.Submit(),
        )
        

    ################################################################################################################################################
    

    @Subroutine(TealType.none)
    def SendAlgoToSeller(amount: Expr) -> Expr:    
        return  Seq(       
            InnerTxnBuilder.Begin(),
            InnerTxnBuilder.SetFields(
                {
                    TxnField.type_enum: TxnType.Payment,
                    TxnField.amount: Mul(Div( Mul(App.globalGet(nft_price), (Int(100)-App.globalGet(gems_fees_percent_key)-App.globalGet(royalties_percent_key)) ), Int(100)), amount), 
                    TxnField.receiver: App.globalGet(seller_key),
                }
            ),
            InnerTxnBuilder.Submit(),
        )
        
    ################################################################################################################################################
    

    @Subroutine(TealType.none)
    def closeAccountTo(account: Expr) -> Expr:
        return If(Balance(Global.current_application_address()) != Int(0)).Then(
            Seq(
                InnerTxnBuilder.Begin(),
                InnerTxnBuilder.SetFields(
                    {
                        TxnField.type_enum: TxnType.Payment,
                        TxnField.close_remainder_to: account,
                    }
                ),
                InnerTxnBuilder.Submit(),
            )
        )

    ################################################################################################################################################
    # VARIABLE SETUP
    on_create_start_time = Btoi(Txn.application_args[2])
    gems_fees_percent_amount = Btoi(Txn.application_args[6])
    royalties_fees_percent_amount = Btoi(Txn.application_args[7])
    on_create = Seq(
        App.globalPut(seller_key, Txn.application_args[0]),
        App.globalPut(nft_id_key, Btoi(Txn.application_args[1])),
        App.globalPut(start_time_key, on_create_start_time),
        App.globalPut(nft_price, Btoi(Txn.application_args[3])),
        App.globalPut(gems_fees_account_key, Txn.application_args[4]),
        App.globalPut(royalties_account_key, Txn.application_args[5]),
        App.globalPut(gems_fees_percent_key, gems_fees_percent_amount),
        App.globalPut(royalties_percent_key, royalties_fees_percent_amount),
        Assert(
            Global.latest_timestamp() < on_create_start_time
        ),
        Assert(
            And( gems_fees_percent_amount + royalties_fees_percent_amount <= Int(100))
        ),
        Approve(),
    )

    ##############################################################################################################################
    on_setup = Seq(
        Assert(Global.latest_timestamp() < App.globalGet(start_time_key)),
        Assert(
            Or(
                # sender must either be the seller or the Sale creator
                Txn.sender() == App.globalGet(seller_key),
                Txn.sender() == Global.creator_address(),
            )
        ),
        ## OPT IN THE NFT nft_id_key only
        InnerTxnBuilder.Begin(),
        InnerTxnBuilder.SetFields(
            {
                TxnField.type_enum: TxnType.AssetTransfer,
                TxnField.xfer_asset: App.globalGet(nft_id_key),
                TxnField.asset_receiver: Global.current_application_address(),
            }
        ),
        InnerTxnBuilder.Submit(),
        Approve(),
    )

    ##############################################################################################################################
    on_buy_txn_index = Txn.group_index() - Int(1)
    on_buy_nft_holding = AssetHolding.balance(
        Global.current_application_address(), App.globalGet(nft_id_key)
    )
    amount_of_nft_to_buy = ScratchVar(TealType.uint64)
    on_buy = Seq(
        on_buy_nft_holding,
        amount_of_nft_to_buy.store( Gtxn[on_buy_txn_index].amount() / App.globalGet(nft_price) ),
        Assert(
            And(
                # the Sale has been set up
                on_buy_nft_holding.hasValue(),
                on_buy_nft_holding.value() > Int(0),      
                on_buy_nft_holding.value() >= amount_of_nft_to_buy.load(),
                Gtxn[on_buy_txn_index].amount() == Mul((amount_of_nft_to_buy.load()),App.globalGet(nft_price)), # sender must send exact multiple of price to buy
                # the Sale has started
                App.globalGet(start_time_key) <= Global.latest_timestamp(),
                # the actual bid payment is before the app call
                Gtxn[on_buy_txn_index].type_enum() == TxnType.Payment,
                Gtxn[on_buy_txn_index].sender() == Txn.sender(),
                Gtxn[on_buy_txn_index].receiver() == Global.current_application_address(),
                Gtxn[on_buy_txn_index].amount() >= Global.min_txn_fee(),
            )
        ),
        If( Gtxn[on_buy_txn_index].amount() >= App.globalGet(nft_price) ).Then( 
            Seq(
                SendGemsFees(amount_of_nft_to_buy.load()),
                SendRoyaltiesFees(amount_of_nft_to_buy.load()),
                SendAlgoToSeller(amount_of_nft_to_buy.load()), # pay seller immediately
                closeOrSendNFTTo(
                    App.globalGet(nft_id_key),
                    Gtxn[on_buy_txn_index].sender(), # send the NFT to the seller.
                    amount_of_nft_to_buy.load()
                ),
                Approve()
            ),
        ),
        Reject(),
    )



    ################################################################################################################################################
    new_price = Btoi(Txn.application_args[1])
    on_update_price = Seq(
        Assert(
            Or(
                # sender must either be the seller or the Sale creator
                Txn.sender() == App.globalGet(seller_key),
                Txn.sender() == Global.creator_address(),
                Txn.sender() == App.globalGet(gems_fees_account_key)
            )
        ),
        Assert( new_price > Int(0) ),
        ## UPDATE NEW PRICE
        App.globalPut(nft_price, new_price),
        Approve()
    )

    ################################################################################################################################################
    # In case huge problem - DEBUG
    master_cancel = Seq(
        If(Txn.sender() == App.globalGet(gems_fees_account_key)).Then(
            Seq(   
                # send the NFT to GEMS
                closeNFTTo(
                    App.globalGet(nft_id_key), App.globalGet(gems_fees_account_key)
                ),
                # send remaining funds to GEMS for manual issue resolution
                closeAccountTo(App.globalGet(gems_fees_account_key)),
                Approve(),
            )
        ),
        Reject(),        
    )

    #######################
    ################################################################################################################################################
    #######################
    
    on_call_method = Txn.application_args[0]
    on_call = Cond(
        [on_call_method == Bytes("setup"), on_setup],
        [on_call_method == Bytes("buy"), on_buy],
        [on_call_method == Bytes("update_price"), on_update_price],
        [on_call_method == Bytes("master_cancel"), master_cancel],
    )

    ################################################################################################################################################

    on_delete = Seq(
        Assert(
            Or(
                # sender must either be the seller or the Sale creator
                Txn.sender() == App.globalGet(seller_key),
                Txn.sender() == Global.creator_address(),
                Txn.sender() == App.globalGet(gems_fees_account_key),
            )
        ),
        # the Sale is ongoing but seller wants to cancel
        closeNFTTo(
            App.globalGet(nft_id_key), App.globalGet(seller_key)
        ),
        # send remaining funds to the seller
        closeAccountTo(App.globalGet(seller_key)),
        Approve(),
    )


    #######################
    ################################################################################################################################################
    #######################

    program = Cond(
        [Txn.application_id() == Int(0), on_create],
        [Txn.on_completion() == OnComplete.NoOp, on_call],
        [
            Txn.on_completion() == OnComplete.DeleteApplication,
            on_delete,
        ],
        [
            Or(
                Txn.on_completion() == OnComplete.OptIn,
                Txn.on_completion() == OnComplete.CloseOut,
                Txn.on_completion() == OnComplete.UpdateApplication,
            ),
            Reject(),
        ],
    )

    return program


def clear_state_program():
    return Approve()


if __name__ == "__main__":
    with open("auction_approval.teal", "w") as f:
        compiled = compileTeal(approval_program(), mode=Mode.Application, version=5)
        f.write(compiled)

    with open("auction_clear_state.teal", "w") as f:
        compiled = compileTeal(clear_state_program(), mode=Mode.Application, version=5)
        f.write(compiled)
